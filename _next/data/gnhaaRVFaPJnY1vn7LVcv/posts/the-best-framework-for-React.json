{"pageProps":{"frontMatter":{"title":"The best framework for React - Nextjs.","description":"An introduction about the React's infamous framework","date":"June 29, 2022","thumbnail":"images/29.jpeg"},"slug":"the-best-framework-for-React","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    h1: \"h1\",\n    code: \"code\",\n    pre: \"pre\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"If React is a UI/state library, then Nextjs tells us how to use the library the \", _jsx(_components.strong, {\n        children: \"right\"\n      }), \" way to build fast web application also it makes your development process much easier.\\nThis post is an introduction to Nextjs, with few examples below to quickly showcase Nextjs features and how it is very easy to use Nextjs for React.\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Routing done easy\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One of the building blocks of web apps is routing. I worked on many React apps in the past, before NextJs, people \\\"freestyle\\\" on choosing the project's folder structure and naming conventions, how to do routing, etc... Every project have a slightly different file structures since there is really no universal standard,\\nwhich makes it sometimes hard to read.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now in Nextjs, it will automatically handle routing for you, simply create files under \", _jsx(_components.code, {\n        children: \"/pages\"\n      }), \" folder and export it as default.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"    pages/\\n    |---> index.js\\n    |---> about.js\\n    |---> dashboard/\\n          |---> index.js\\n          |---> users.js\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then your site will be accessible at\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    /\\n    /about\\n    /dashboard\\n    /dashboard/users\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Dynamic Routes\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Nextjs supports dynamic pages routing, for example you created file structures like this\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    pages/\\n    |---> users/\\n          |---> [userId].js\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Then your site will be accessible at \", _jsx(_components.code, {\n        children: \"pages/users/1\"\n      }), \", \", _jsx(_components.code, {\n        children: \"pages/users/2\"\n      }), \", ...\\nMatched parameters will be sent as a query parameter (\", _jsx(_components.code, {\n        children: \"userId\"\n      }), \" in the example) to the page.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"    import {useRouter} from 'next/router'\\n\\n    export default () => {\\n        const { userId } = useRouter().query\\n        return ...\\n    }\\n\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For more read on \", _jsx(_components.a, {\n        href: \"https://nextjs.org/docs/routing/dynamic-routes\",\n        children: \"Dynamic Routing Nextjs\"\n      })]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Per-page layouts\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Sometimes your screens/pages share some part of the UI. It is a good practice to seperate the layout component to help yourself repeating.\\nFor example we have 2 pages that share the same layout.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"/page-a\"\n      })\n    }), \"\\n\", _jsxs(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: \"20% 1fr\",\n        width: \"100%\",\n        gridGap: 5,\n        height: 260,\n        background: \"inherit\",\n        borderRadius: 7\n      },\n      children: [_jsx(\"div\", {\n        style: {\n          background: \"#faa\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          borderRadius: 5\n        },\n        children: _jsx(_components.p, {\n          children: \"Side Bar\"\n        })\n      }), _jsx(\"div\", {\n        style: {\n          background: \"#aaf\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          borderRadius: 5\n        },\n        children: _jsx(_components.p, {\n          children: \"Page A\"\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"/page-b\"\n      })\n    }), \"\\n\", _jsxs(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: \"20% 1fr\",\n        width: \"100%\",\n        gridGap: 5,\n        height: 260,\n        background: \"inherit\",\n        borderRadius: 7\n      },\n      children: [_jsx(\"div\", {\n        style: {\n          background: \"#faa\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          borderRadius: 5\n        },\n        children: _jsx(_components.p, {\n          children: \"Side Bar\"\n        })\n      }), _jsx(\"div\", {\n        style: {\n          background: \"#aaf\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          borderRadius: 5\n        },\n        children: _jsx(_components.p, {\n          children: \"Page B\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Create \", _jsx(_components.code, {\n        children: \"DashboardLayout\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import SideBar from '../components/SideBar'\\n\\nexport default DashboardLayout({ content }){\\n    return <div style={{display:\\\"grid\\\", gridTemplateColumns:\\\"20% 1fr\\\"}}>\\n        <SideBar/>\\n        {content}\\n    </div>\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Adding property \", _jsx(_components.code, {\n        children: \"getLayout\"\n      }), \" to your pages.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import DashboardLayout from '../layouts/dashboard-layout'\\n\\nexport default function PageA() {\\n    return <div>\\n        PageA\\n    </div>\\n}\\n\\nPageA.getLayout = (page) => {\\n  return (\\n    <DashboardLayout>\\n        {page}\\n    </DashboardLayout>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import DashboardLayout from '../layouts/dashboard-layout'\\n\\nexport default function PageB() {\\n    return <div>\\n        PageB\\n    </div>\\n}\\n\\nPageB.getLayout = (page) => {\\n  return (\\n    <DashboardLayout>\\n        {page}\\n    </DashboardLayout>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When using Next.js youâ€™ll most likely need to override the global App component to get access to some features like persisting state, global css or layouts. This can be done by creating a file \", _jsx(_components.code, {\n        children: \"_app.js\"\n      }), \" directly under the \", _jsx(_components.code, {\n        children: \"pages/\"\n      }), \" folder. In your \", _jsx(_components.code, {\n        children: \"pages/_app.js\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"export default function MyApp({ Component, pageProps }) {\\n    // Use the layout defined at the page level, if available\\n    const getLayout = Component.getLayout || ((page) => page)\\n    return <>\\n        {getLayout(<Component {...pageProps} />)}\\n    </>\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This layout pattern enables state persistence because the React component tree is maintained between page transitions. For more read on \", _jsx(_components.a, {\n        href: \"https://nextjs.org/docs/basic-features/layouts#per-page-layouts\",\n        children: \"official docs\"\n      })]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"getServerSideProps\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you export an async function called getServerSideProps from a page,\\nNextjs will pre-render this page on each request using the data returned by getServerSideProps.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"export async function getServerSideProps(context) {\\n    const { params, locale} = context;\\n    const res = await fetchUserDataById(params.id) // fetch data from database\\n    return {\\n        props: {\\n            userData: res?.data\\n            locale\\n        }, // will be passed to the page component as props\\n    }\\n}\\n\\nexport default function User(props){ \\n    const { userData, locale } = props; // <-- props received from getServerSideProps\\n    return <>\\n        ...\\n    </>\\n}\\n\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"context\"\n      }), \" parameter is an object containing the following keys:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"params\"\n        }), \": If this page uses a dynamic route, params contains the route parameters. If the page name is \", _jsx(_components.code, {\n          children: \"[id].js\"\n        }), \" , then params will look like { id: ... }.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"req\"\n        }), \": The HTTP IncomingMessage object, with an additional cookies prop, which is an object with string keys mapping to string values of cookies.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"res\"\n        }), \": The HTTP response object.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"query\"\n        }), \": An object representing the query string.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"preview\"\n        }), \": preview is true if the page is in the Preview Mode and false otherwise.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"previewData\"\n        }), \": The preview data set by setPreviewData.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"resolvedUrl\"\n        }), \": A normalized version of the request URL that strips the _next/data prefix for client transitions and includes original query values.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"locale\"\n        }), \" contains the active locale (if enabled).\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"locales\"\n        }), \" contains all supported locales (if enabled).\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"defaultLocale\"\n        }), \" contains the configured default locale (if enabled).\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"getStaticProps\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Nextjs will pre-render this page at build time using the data returned by getServerSideProps.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"export async function getStaticProps() {\\n    const { params, locale} = context;\\n    // Call an external API endpoint to get data\\n    const userData = await await fetch(`https://.../user/${params.id}`).then(res => res.json()); \\n    return {\\n        props: {\\n            userData,\\n            locale\\n        }, // will be passed to the page component as props\\n    }\\n}\\n\\nexport default function User(props){ \\n    const { userData, locale } = props; // <-- props received from getServerSideProps\\n    return <>\\n        ...\\n    </>\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The context parameter is an object containing the following keys:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"params\"\n        }), \" contains the route parameters for pages using dynamic routes. For example, if the page name is \", _jsx(_components.code, {\n          children: \"[id].js\"\n        }), \"  , then params will look like { id: ... }. You should use this together with getStaticPaths, which weâ€™ll explain later.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"preview\"\n        }), \" is true if the page is in the Preview Mode and undefined otherwise.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"previewData\"\n        }), \" contains the preview data set by \", _jsx(_components.code, {\n          children: \"setPreviewData\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"locale\"\n        }), \" contains the active locale (if enabled).\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"locales\"\n        }), \" contains all supported locales (if enabled).\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"defaultLocale\"\n        }), \" contains the configured default locale (if enabled).\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Wait, it is doing the same as \", _jsx(_components.code, {\n        children: \"getServerSideProps\"\n      }), \" ? Yes, both functions passed some props to the page, but there are few differences to consider.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"getServerSideProps\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"This function get called every time you visit the site, the server will have to build the page every time each request.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Can be slow\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Great for dynamic data that changes regularly\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"getStaticProps\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"This function get called only once at build time. Props remain the same until the next build.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Great for speed and SEO\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Great for static data\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"getStaticPaths\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Assume you are building a blog site. You want to pre-render your articles as static pages for fast serving and better SEO.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"export async function getStaticPaths() {\\n  // Read the files inside the pages/posts dir\\n  const articles = await fetch('https://.../articles').then(res => res.json());\\n    //   articles = [\\n    //     {\\n    //         id:\\\"1\\\",\\n    //         title:\\\"hello-world\\\"\\n    //     },\\n    //     {\\n    //         id:\\\"2\\\",\\n    //         title:\\\"data-fetching-in-react\\\"\\n    //     }\\n    //   ]\\n\\n  // Generate path for each file\\n  const paths = articles.map((article) => {\\n    return {\\n      params: {\\n        slug: article.id\\n      },\\n    };\\n  });\\n\\n  return {\\n    paths,\\n    fallback: false,\\n  };\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The value for each params object must match the parameters used in the page name.\\nIf the page name is \", _jsx(_components.code, {\n        children: \"articles/[slug].js\"\n      }), \", then params should contain \", _jsx(_components.code, {\n        children: \"slug\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This function run once at build time and can be used altogether with \", _jsx(_components.code, {\n        children: \"getStaticProps\"\n      }), \" but can not be used with \", _jsx(_components.code, {\n        children: \"getServerSideProps\"\n      }), \". For more read on \", _jsx(_components.a, {\n        href: \"https://nextjs.org/docs/api-reference/data-fetching/get-static-paths\",\n        children: \"official docs\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"export default function Post({ post }) {\\n  // Render post...\\n}\\n\\n// This function gets called at build time\\nexport async function getStaticPaths() {\\n  // Call an external API endpoint to get posts\\n  const posts = await fetch('https://.../posts').then(res => res.json())\\n\\n  // Get the paths we want to pre-render based on posts\\n  const paths = posts.map((post) => ({\\n    params: { id: post.id },\\n  }))\\n\\n  // We'll pre-render only these paths at build time.\\n  // { fallback: false } means other routes should 404.\\n  return { paths, fallback: false }\\n}\\n\\n// This also gets called at build time\\nexport async function getStaticProps({ params }) {\\n  // params contains the post `id`.\\n  // If the route is like /posts/1, then params.id is 1\\n  const post = await fetch(`https://.../posts/${params.id}`).then(res => res.json())\\n\\n  // Pass post data to the page via props\\n  return { props: { post } }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Conclusion\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Nextjs is a great framework for React. If you are React developer, you must know Nextjs. With all the great features and tools Nextjs provided, it saves your time and make your life easier, why not give it a try?\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Are there any alternatives to Nextjs ? Yes, checkout \", _jsx(_components.a, {\n        href: \"https://remix.run\",\n        children: \"Remix.run\"\n      }), \". Remix is a relatively new framework compared to Nextjs, and it's built on top ReactRouterV6.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Checkout  \", _jsx(_components.a, {\n        href: \"https://nextjs.org\",\n        children: \"offical Nextjs\"\n      }), \" website.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"readTime":7.095},"__N_SSG":true}